openapi: 3.0.0
info:
  version: "v1.0.0-beta.1"
  title: 'LinkSmart Historical Datastore'
  description: 'LinkSmartÂ® Historical Datastore (HDS) is a modular service for time-series data storage. This stores sensor measurements in senml formats. Data API takes care of creating and accessing sensor measurements. Registry APIs manage metadata corresponding to the sensor measurements'
tags:
- name: registry
  description: Registry API
- name: data
  description: Data API
paths:
  /registry/:
    get:
      tags:
        - registry
      description: Returns all the registries present in the datastore
      operationId: findseries
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: If-Modified-Since
          in: header
          description: Conditional request based on date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataStream'
        '304':
          description: Not Modified (since `If-Modified-Since`)
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'

    post:
      tags:
      - registry
      summary: Creates new `DataStream` 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStream"
      responses:
        '201':
          description: Created Successfully
          headers:
            Location:
              description: URL of the newly created Datasource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{name}:
    get:
      tags:
      - registry
      summary: Retrieves a `Datasource` object
      parameters:
      - name: name
        in: path
        description: ID of the `Datasource`
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStream'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
      - registry
      summary: Updates the `Datasource`
      parameters:
      - name: name
        in: path
        description: ID of the `Datasource`
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStream"
      responses:
        '200':
          description: Datasource updated successfully
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
      - registry
      summary: Deletes the `DataStream`
      parameters:
      - name: name
        in: path
        description: ID of the `Datasource`
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{type}/{path}/{op}/{value}:
    get:
      tags:
      - registry
      summary: Filters Datasources
      description: |
        The filtering API enables filtering based on a given path, operator, and value. Below are few examples:
        * Get datasource with name:
          `/registry/one/name/equals/home/bedroom/temperature`
        * Filter all datasources with prefix `home` in name:
          `/registry/many/name/prefix/home`
        * Filter all datasources based on address meta field:
          `/registry/many/meta.address/contains/Bonn`
      parameters:
      - name: type
        in: path
        description: The expected type of response (one or many)
        required: true
        schema:
          type: string
      - name: path
        in: path
        description: Dot-separated path in the registration JSON
        required: true
        schema:
          type: string
      - name: op
        in: path
        description: One of (equals, prefix, suffix, contains) string comparison operations
        required: true
        schema:
          type: string
      - name: value
        in: path
        description: The intended value/prefix/suffix/substring of the key identified
          by the path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/perPage'
      responses:
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  /data/{name}:
    post:
      tags:
      - data
      summary: Submits `senmlPack`
      parameters:
      - name: name
        in: path
        description: name of the `Datasource`
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: MIME Type of dataset
        required: true
        schema:
          type: string
      requestBody:
        required: true
        description: "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)
          object.\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SenmlPack'
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'
    get: 
      tags:
        - data
      summary: Retrieve a part of datastream based on Query
      parameters:
        - name: name
          in: path
          description: name of the `DataStream`
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/perPage"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
        - $ref: "#/components/parameters/sort"

      responses:
        '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    selfLink:
                      type: string
                      description: link to fetch the current response
                    took:
                      description: Time taken in seconds
                      type: number
                    nextLink:
                      type: string
                      description: when the total entries exceed current limit of "perPage", the nextLink has the link to next page
                    data:
                        $ref: '#/components/schemas/SenmlPack'
components:
  schemas:
    DataStream:
      properties:
        name:
          type: string
          example: "IZB/C5/125/avgtemp"
        source:
          type: object
          items:
              - $ref: "#/components/schemas/MQTTSource"
        dataType:
          type: string
          pattern: 'string|float|bool|data'
        meta:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
        retain:
            type: object
            properties:
              min: 
                type: string
                example: "1day"
              max: 
                type: string
                example: "30day"
      required:
        - name
    MQTTSource:
          type: object
          required:
            - uri
            - topic
          properties:
            type:
              type: string
              pattern: 'MQTT'
            
            url: #complete URL including protocols
              type: string
              example: "tcp://example.com:1883"
            topic: #topic being used
              type: string
              example: "LS/#/temperature"
            qos: 
              type: integer
            username :
              type: string
            password:
              type: string
            caFile: 
              type: string
            certFile:
              type: string
            keyFile:
              type: string
    SenmlPack:
      type: array
      items: 
        $ref: '#/components/schemas/Record'
    Record:
        type: object
        properties: 
          bn: 
            type: string
          bt: 
            type: integer
            format: double
          bu: 
            type: string
          bver: 
            type: integer
          n: 
            type: string
          t: 
            type: integer
            format: double
          u: 
            type: string
          v: 
            type: number
            format: double
          vs:
            type: string
          vb: 
            type: boolean
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    page:
      name: page
      in: query
      description: Page number in the pagination
      required: false
      schema:
        type: integer
        minimum: 1
    perPage:
      name: per_page
      in: query
      description: Number of entries per page
      required: false
      schema:
        type: integer
        minimum: 1
    from:
      name: from
      in: query
      description: from time
      required: false
      schema:
        type: string
        format: date
    to:
      name: to
      in: query
      description: to time
      required: false
      schema:
        type: string
        format: date
        default: "now (datetime value when query is created"
    sort:
      name: sort
      in: query
      description: sorting method 
      required: false
      schema:
        type: string
        default: "desc"
        format: date
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    notfound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    methodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'