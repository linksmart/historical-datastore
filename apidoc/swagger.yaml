openapi: 3.0.3
info:
  version: v1.0.0-beta.11
  title: 'LinkSmart Historical Datastore'
  description: 'LinkSmart Historical Datastore (HDS) is a modular service for time-series data storage. This stores sensor measurements in [SenML](https://tools.ietf.org/html/rfc8428) formats. Data API takes care of creating and accessing sensor measurements. Registry APIs manage metadata corresponding to the sensor measurements'
tags:
  - name: registry
    description: Registry API
  - name: data
    description: Data API
  - name: pki
    description: Certification Authority API
paths:
  /registry/:
    get:
      tags:
        - registry
      summary: Returns all the time series registrations
      operationId: findseries
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: If-Modified-Since
          in: header
          description: Conditional request based on date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
              examples:
                TimeSeriesList:
                  $ref: '#/components/examples/Registry'
        '304':
          description: Not Modified (since `If-Modified-Since`)
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'

    post:
      deprecated: true
      tags:
        - registry
      summary: Creates new time series
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistryItem"
            examples:
              TimeSeries:
                $ref: "#/components/examples/RegistryItem"
      responses:
        '201':
          description: Created Successfully
          headers:
            Location:
              description: URL of the newly created TimeSeries
              schema:
                type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{name}:
    get:
      tags:
        - registry
      summary: Retrieves a time series registration object
      parameters:
        - $ref: "#/components/parameters/name"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryItem'
              examples:
                TimeSeries:
                  $ref: '#/components/examples/RegistryItem'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - registry
      summary: Creates or updates the time series registration object
      parameters:
        - $ref: "#/components/parameters/name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistryItem"
            example:
              TimeSeries:
                $ref: '#/components/examples/RegistryItem'
      responses:
        '201':
          description: Created Successfully
          headers:
            Location:
              description: URL of the newly created TimeSeries
              schema:
                type: string
        '204':
          description: TimeSeries updated successfully
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - registry
      summary: Deletes the time series registration and corresponding data
      parameters:
        - $ref: "#/components/parameters/name"
      responses:
        '204':
          description: Deletion successful
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{type}/{path}/{op}/{value}:
    get:
      tags:
        - registry
      summary: Filters time series registration objects
      description: |
        The filtering API enables filtering based on a given path, operator, and value. Below are few examples:
        * Get TimeSeries with name:
          `/registry/one/name/equals/home/bedroom/temperature`
        * Filter all TimeSeriess with prefix `home` in name:
          `/registry/many/name/prefix/home`
        * Filter all TimeSeriess based on address meta field:
          `/registry/many/meta.address/contains/Bonn`
      parameters:
        - name: type
          in: path
          description: The expected type of response (one or many)
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Dot-separated path in the registration JSON
          required: true
          schema:
            type: string
        - name: op
          in: path
          description: One of (equals, prefix, suffix, contains) string comparison operations
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: The intended value/prefix/suffix/substring of the key identified
            by the path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: Successful response with matched elements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
              examples:
                TimeSeriesList:
                  $ref: '#/components/examples/Registry'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  /data/:
    post:
      tags:
        - data
      summary: Submits time series data without specifying the senml name in the url
      requestBody:
        required: true
        description: "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)
          object.\n"
        content:
          application/senml+json:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            examples:
              SenMLPack:
                $ref: '#/components/examples/SenMLPack'
          application/senml+cbor:
            schema:
              type: string
              format: binary
            example:
              "84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5"
          application/senml+xml:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              <sensml xmlns="urn:ietf:params:xml:ns:senml">
              <senml bn="urn:dev:ow:10e2073a0108006:" bt="1.276020076001e+09"
              bu="A" bver="5" n="voltage" u="V" v="120.1"></senml>
              <senml n="current" t="-5" v="1.2"></senml>
              <senml n="current" t="-4" v="1.3"></senml>
              <senml n="current" t="-3" v="1.4"></senml>
              <senml n="current" t="-2" v="1.5"></senml>
              <senml n="current" t="-1" v="1.6"></senml>
              <senml n="current" v="1.7"></senml>
              </sensml>
          text/vnd.senml.v2+csv:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              "Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \n
              946684799,10,dev123temp,degC,22.1,,,,0 \n
              946684799,0,dev123room,degC,,kitchen,,, \n
              946684800,0,dev123data,degC,,,,abc, \n
              946684800,0,dev123ok,degC,,,true,,"
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'
  /data/{names}:
    post:
      tags:
        - data
      summary: Submits time series data
      parameters:
        - $ref: "#/components/parameters/names"
      requestBody:
        required: true
        description: "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)
          object.\n"
        content:
          application/senml+json:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              SenMLPack:
                $ref: '#/components/examples/SenMLPack'
          application/senml+cbor:
            schema:
              type: string
              format: binary
            example:
              "84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5"
          application/senml+xml:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              <sensml xmlns="urn:ietf:params:xml:ns:senml">
              <senml bn="urn:dev:ow:10e2073a0108006:" bt="1.276020076001e+09"
              bu="A" bver="5" n="voltage" u="V" v="120.1"></senml>
              <senml n="current" t="-5" v="1.2"></senml>
              <senml n="current" t="-4" v="1.3"></senml>
              <senml n="current" t="-3" v="1.4"></senml>
              <senml n="current" t="-2" v="1.5"></senml>
              <senml n="current" t="-1" v="1.6"></senml>
              <senml n="current" v="1.7"></senml>
              </sensml>
          text/vnd.senml.v2+csv:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              "Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \n
              946684799,10,dev123temp,degC,22.1,,,,0 \n
              946684799,0,dev123room,degC,,kitchen,,, \n
              946684800,0,dev123data,degC,,,,abc, \n
              946684800,0,dev123ok,degC,,,true,,"
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - data
      summary: Retrieve the paginated data of the specified time series
      parameters:
        - $ref: "#/components/parameters/names"
        - name: from
          in: query
          description: Time from which the measurements (chronologically) are expected
          required: false
          schema:
            type: string
            format: date
            default: "0001-01-01T00:00:00Z"
        - name: to
          in: query
          description: Time upto which the measurements (chronologically) is expected
          required: false
          schema:
            type: string
            format: date
            default: "now (datetime value when query is created)"
        - name: sort
          in: query
          description: Sorting order of records by timestamps
          required: false
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
        - name: denormalize
          in: query
          description: Fields to be denormalized in the response senml pack.  "n" to denormalize name field, "t" to denormalize time field  "u" to denormalize unit field, "v" to denormalize value and "s" to denormalize sum fields. Client can pass multiple values as "denormalize=t&denormalize=n"
          required: false
          schema:
            type: string
            enum: ["n","t", "u","v", "s"]
            example: n
        - name: count
          in: query
          description: Include the total number of entries inside the response. This is useful for pagination such that the client can calculate total pages after the first query. Please use this only in the first query as counting adds additional computation.
          required: false
          schema:
            type: boolean
        - name: aggr
          in: query
          description: Function for computing aggregates on the fly.
          required: false
          schema:
            type: string
            enum: ["mean", "sum", "min", "max", "count"]
            example: mean
        - name: window
          in: query
          description: |
            Window size for computing aggregates on the fly.

            Valid window size unit suffixes: ns, us, ms, s, m, h

            Fractions may be given as 1.5h or 1h30m
          required: false
          schema:
            type: string
            example: 10m
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  selfLink:
                    type: string
                    description: link to fetch the current response
                  took:
                    description: Time taken in seconds
                    type: number
                  nextLink:
                    type: string
                    description: when the total entries exceed current limit of "perPage" (which defaults to 1000), the nextLink has the link to next page
                  data:
                    $ref: '#/components/schemas/SenMLPack'
                  count:
                    type: integer
                    description: This field is only present when the GET has parameter `count=true`
              examples:
                SenMLPackResponse:
                  $ref: '#/components/examples/SenMLPackResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - data
      summary: Deletes the time series data for a given range
      parameters:
        - $ref: "#/components/parameters/names"
        - name: from
          in: query
          description: Time from which the measurements (chronologically) are deleted
          required: false
          schema:
            type: string
            format: date
            default: "0001-01-01T00:00:00Z"
        - name: to
          in: query
          description: Time upto which the measurements (chronologically) are deleted
          required: false
          schema:
            type: string
            format: date
            default: "now (datetime value when query is created)"
      responses:
        '204':
          description: Successful response
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'
  /pki/:
    post:
      tags:
        - pki
      summary: Creates a certificate signed by HDS for a given CSR and sends in the response.
      requestBody:
        description: "Certificate Signing Request (CSR) generated by the client"
        content:
          application/x-pem-file:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response with PEM encoded certificate
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/badRequest'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  schemas:
    Registry:
      properties:
        streams: # TODO: change to series
          type: array
          items:
            $ref: '#/components/schemas/RegistryItem'
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        dataLink:
          type: string
          description: data query endpoint for items in the response
      required:
        - name
    RegistryItem:
      properties:
        name:
          type: string
          example: "IZB/C5/125/avgtemp"
        source:
          $ref: "#/components/schemas/MQTTConnector"
        dataType:
          type: string
          enum: ['string','float','bool','data']
        meta:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: "A map containing miscellaneous details about the registry entry"
        retain:
          type: object
          properties:
            min:
              type: string
              example: "24h"
            max:
              type: string
              example: "720h"
      required:
        - name
    MQTTConnector:
      type: object
      required:
        - uri
        - topic
      properties:
        type:
          type: string
          pattern: 'MQTT'

        url: #complete URL including protocols
          type: string
          example: "tcp://example.com:1883"
        topic: #topic being used
          type: string
          example: "LS/#/temperature"
        qos:
          type: integer
        username :
          type: string
        password:
          type: string
        caFile:
          type: string
        certFile:
          type: string
        keyFile:
          type: string
    SenMLPack:
      title: SenML Pack
      type: array
      items:
        $ref: '#/components/schemas/SenMLRecord'
    SenMLRecord:
      title: SenML Record
      type: object
      properties:
        bn:
          type: string
        bt:
          type: integer
          format: double
        bu:
          type: string
        bver:
          type: integer
        n:
          type: string
        t:
          type: integer
          format: double
        u:
          type: string
        v:
          type: number
          format: double
        vs:
          type: string
        vb:
          type: boolean
    Error:
      description: Problem Details for HTTP APIs (see RFC 7807)
      required:
        - title
        - status
        - detail
      properties:
        status:
          type: integer
          format: int32
          description: A short, human-readable summary of the problem type.
        title:
          type: string
          description: The HTTP status code (RFC7231, Section 6)
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description:  A URI reference that identifies the specific occurrence of the problem. This is applicable to errors with status >=500. Currently, this link cannot be dereferenced.
  parameters:
    name:
      name: name
      in: path
      description: Senml name of the time series
      required: true
      schema:
        type: string
    names:
      name: names
      in: path
      description: Comma seperated names of the time series
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number in the pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    perPage:
      name: perPage
      in: query
      description: Number of entries in each page.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 1000
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    notfound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    methodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    RegistryItem:
      summary: TimeSeries
      value:
        {
          "name": "terrace/temperature",
          "source": {
            "type": "MQTT",
            "url": "ssl://example.com:8883",
            "topic": "terrace/temperature",
            "username": "*****",
            "password": "*****"
          },
          "dataType": "float",
          "unit": "Cel",
          "meta": null,
        }
    Registry:
      summary: Paginated TimeSeries List
      value:
        {
          "streams": [
          {
            "name": "hall/cat",
            "source": {
              "type": "MQTT",
              "url": "ssl://example.com:8883",
              "topic": "hall/cat",
              "username": "*****",
              "password": "*****"
            },
            "dataType": "string",
            "meta": null,
          },
          {
            "name": "kitchen/lamp",
            "source": {
              "type": "MQTT",
              "url": "ssl://example.com:8883",
              "topic": "kitchen/lamp",
              "username": "*****",
              "password": "*****"
            },
            "dataType": "bool",
            "meta": null,
          },
          {
            "name": "terrace/temperature",
            "source": {
              "type": "MQTT",
              "url": "ssl://example.com:8883",
              "topic": "terrace/temperature",
              "username": "*****",
              "password": "*****"
            },
            "dataType": "float",
            "unit": "Cel",
            "meta": null,
          }
          ],
          "page": 1,
          "per_page": 100,
          "total": 3,
          "dataLink": "/data/hall/cat,kitchen/lamp,terrace/temperature"
        }
    SenMLPack:
      summary: Example SenML pack
      value:
        [
        {"n":"terrace/temperature","u":"Cel","t":1579192670, "v":20},
        {"n":"terrace/temperature","u":"Cel","t":1579192675, "v":23.5}
        ]
    SenMLPackResponse:
      summary: Example data response
      value:
        {
          "selfLink": "/data/terrace/temperature?&perPage=1000&sort=desc&from=2020-02-10T17:10:00Z&to=2020-04-10T17:10:30Z&page=1&denormalize=n&denormalize=u&denormalize=v",
          "data": [
          {"bn": "terrace/temperature","bu": "Cel","bv": 20.770862545133333,"t": 1583861337.5185657},
          {"t": 1583861332.5185533,"v": -1.0490685363560743},
          {"t": 1583856342.5184987,"v": -0.9880044657724802}
          ],
          "took": 0.004148714,
          "nextLink": "/data/terrace/temperature?&perPage=1000&sort=desc&from=2020-02-10T17:10:00Z&to=2020-04-10T17:10:30Z&page=2&denormalize=n&denormalize=u&denormalize=v"
        }