openapi: 3.0.0
info:
  version: "v1.0.0-beta.7"
  title: 'LinkSmart Historical Datastore'
  description: 'LinkSmart Historical Datastore (HDS) is a modular service for time-series data storage. This stores sensor measurements in [SenML](https://tools.ietf.org/html/rfc8428) formats. Data API takes care of creating and accessing sensor measurements. Registry APIs manage metadata corresponding to the sensor measurements'
tags:
  - name: registry
    description: Registry API
  - name: data
    description: Data API
paths:
  /registry/:
    get:
      tags:
        - registry
      description: Returns all the registries present in the datastore
      operationId: findseries
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: If-Modified-Since
          in: header
          description: Conditional request based on date
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStreamList'
              examples:
                DatastreamList:
                  $ref: '#/components/examples/DatastreamList'
        '304':
          description: Not Modified (since `If-Modified-Since`)
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'

    post:
      tags:
        - registry
      summary: Creates new `DataStream`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStream"
            examples:
              Datastream:
                $ref: "#/components/examples/DataStream"
      responses:
        '201':
          description: Created Successfully
          headers:
            Location:
              description: URL of the newly created Datasource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{name}:
    get:
      tags:
        - registry
      summary: Retrieves a `Datasource` object
      parameters:
        - name: name
          in: path
          description: ID of the `Datasource`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStream'
              examples:
                DataStream:
                  $ref: '#/components/examples/DataStream'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - registry
      summary: Updates the `Datasource`
      parameters:
        - name: name
          in: path
          description: ID of the `Datasource`
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataStream"
            example:
              Datastream:
                $ref: '#/components/examples/DataStream'
      responses:
        '200':
          description: Datasource updated successfully
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - registry
      summary: Deletes the `DataStream`
      parameters:
        - name: name
          in: path
          description: ID of the `Datasource`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '500':
          $ref: '#/components/responses/internalServerError'
  /registry/{type}/{path}/{op}/{value}:
    get:
      tags:
        - registry
      summary: Filters Datasources
      description: |
        The filtering API enables filtering based on a given path, operator, and value. Below are few examples:
        * Get datasource with name:
          `/registry/one/name/equals/home/bedroom/temperature`
        * Filter all datasources with prefix `home` in name:
          `/registry/many/name/prefix/home`
        * Filter all datasources based on address meta field:
          `/registry/many/meta.address/contains/Bonn`
      parameters:
        - name: type
          in: path
          description: The expected type of response (one or many)
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Dot-separated path in the registration JSON
          required: true
          schema:
            type: string
        - name: op
          in: path
          description: One of (equals, prefix, suffix, contains) string comparison operations
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: The intended value/prefix/suffix/substring of the key identified
            by the path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: Successful response with matched elements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStreamList'
              examples:
                DatastreamList:
                  $ref: '#/components/examples/DatastreamList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internalServerError'
  /data/{names}:
    post:
      tags:
        - data
      summary: Submits `SenMLPack`
      parameters:
        - name: names
          in: path
          description: Comma seperated names of the `datastream`
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: MIME Type of dataset
          required: true
          schema:
            type: string
            enum: ["application/senml+json","application/senml+cbor","application/senml+xml","text/vnd.senml.v2+csv"]
      requestBody:
        required: true
        description: "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)
          object.\n"
        content:
          application/senml+json:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              SenMLPack:
                $ref: '#/components/examples/SenMLPack'
          application/senml+cbor:
            schema:
              type: string
              format: binary
            example:
              "84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5"
          application/senml+xml:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              <sensml xmlns="urn:ietf:params:xml:ns:senml">
              <senml bn="urn:dev:ow:10e2073a0108006:" bt="1.276020076001e+09"
              bu="A" bver="5" n="voltage" u="V" v="120.1"></senml>
              <senml n="current" t="-5" v="1.2"></senml>
              <senml n="current" t="-4" v="1.3"></senml>
              <senml n="current" t="-3" v="1.4"></senml>
              <senml n="current" t="-2" v="1.5"></senml>
              <senml n="current" t="-1" v="1.6"></senml>
              <senml n="current" v="1.7"></senml>
              </sensml>
          text/vnd.senml.v2+csv:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              "Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \n
              946684799,10,dev123temp,degC,22.1,,,,0 \n
              946684799,0,dev123room,degC,,kitchen,,, \n
              946684800,0,dev123data,degC,,,,abc, \n
              946684800,0,dev123ok,degC,,,true,,"
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - data
      summary: Retrieve the paginated data of the specified datastreams. See parameters
      parameters:
        - name: names
          in: path
          description: Comma seperated names of the `datastream`
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/perPage"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/denormalize"

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  selfLink:
                    type: string
                    description: link to fetch the current response
                  took:
                    description: Time taken in seconds
                    type: number
                  nextLink:
                    type: string
                    description: when the total entries exceed current limit of "perPage", the nextLink has the link to next page
                  data:
                    $ref: '#/components/schemas/SenMLPack'
              examples:
                SenMLPackResponse:
                  $ref: '#/components/examples/SenMLPackResponse'
  /data/:
    post:
      tags:
        - data
      summary: Submits `SenMLPack` without specifying the senml name
      parameters:
        - name: Content-Type
          in: header
          description: MIME Type of dataset
          required: true
          schema:
            type: string
            enum: ["application/senml+json","application/senml+cbor","application/senml+xml","text/vnd.senml.v2+csv"]
      requestBody:
        required: true
        description: "Dataset to be submitted. \n\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)
          object.\n"
        content:
          application/senml+json:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            examples:
              SenMLPack:
                $ref: '#/components/examples/SenMLPack'
          application/senml+cbor:
            schema:
              type: string
              format: binary
            example:
              "84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5"
          application/senml+xml:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              <sensml xmlns="urn:ietf:params:xml:ns:senml">
              <senml bn="urn:dev:ow:10e2073a0108006:" bt="1.276020076001e+09"
              bu="A" bver="5" n="voltage" u="V" v="120.1"></senml>
              <senml n="current" t="-5" v="1.2"></senml>
              <senml n="current" t="-4" v="1.3"></senml>
              <senml n="current" t="-3" v="1.4"></senml>
              <senml n="current" t="-2" v="1.5"></senml>
              <senml n="current" t="-1" v="1.6"></senml>
              <senml n="current" v="1.7"></senml>
              </sensml>
          text/vnd.senml.v2+csv:
            schema:
              $ref: '#/components/schemas/SenMLPack'
            example:
              "Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \n
              946684799,10,dev123temp,degC,22.1,,,,0 \n
              946684799,0,dev123room,degC,,kitchen,,, \n
              946684800,0,dev123data,degC,,,,abc, \n
              946684800,0,dev123ok,degC,,,true,,"
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notfound'
        '405':
          $ref: '#/components/responses/methodNotAllowed'
        '415':
          $ref: '#/components/responses/unsupportedMediaType'
        '500':
          $ref: '#/components/responses/internalServerError'

components:
  schemas:
    DataStreamList:
      properties:
        url:
          type: string
          description: "url of the registry endpoint"
        streams:
          type: array
          items:
            $ref: '#/components/schemas/DataStream'
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
      required:
        - name
    DataStream:
      properties:
        name:
          type: string
          example: "IZB/C5/125/avgtemp"
        source:
          $ref: "#/components/schemas/MQTTSource"
        dataType:
          type: string
          enum: ['string','float','bool','data']
        meta:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: "A map containing miscellaneous details about the registry entry"
        retain:
          type: object
          properties:
            min:
              type: string
              example: "24h"
            max:
              type: string
              example: "720h"
      required:
        - name
    MQTTSource:
      type: object
      required:
        - uri
        - topic
      properties:
        type:
          type: string
          pattern: 'MQTT'

        url: #complete URL including protocols
          type: string
          example: "tcp://example.com:1883"
        topic: #topic being used
          type: string
          example: "LS/#/temperature"
        qos:
          type: integer
        username :
          type: string
        password:
          type: string
        caFile:
          type: string
        certFile:
          type: string
        keyFile:
          type: string
    SenMLPack:
      type: array
      items:
        $ref: '#/components/schemas/Record'
    Record:
      type: object
      properties:
        bn:
          type: string
        bt:
          type: integer
          format: double
        bu:
          type: string
        bver:
          type: integer
        n:
          type: string
        t:
          type: integer
          format: double
        u:
          type: string
        v:
          type: number
          format: double
        vs:
          type: string
        vb:
          type: boolean
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    page:
      name: page
      in: query
      description: Page number in the pagination
      required: false
      schema:
        type: integer
        minimum: 1
    perPage:
      name: per_page
      in: query
      description: Number of entries per page
      required: false
      schema:
        type: integer
        minimum: 1
    from:
      name: from
      in: query
      description: Time from which the measurements (chronologically) are expected
      required: false
      schema:
        type: string
        format: date
    to:
      name: to
      in: query
      description: Time upto which the measurements (chronologically) is expected
      required: false
      schema:
        type: string
        format: date
        default: "now (datetime value when query is created"
    sort:
      name: sort
      in: query
      description: Sorting method either "desc" or "asc". If "DESC" then the resultant DataStream will have latest measurenemts first. If "asc" then the resultant DataStream will have oldest measurements first.
      required: false
      schema:
        type: string
        enum: ["asc", "desc"]
        default: "desc"
    denormalize:
      name: denormalize
      in: query
      description: Comma separated list of fields to be denormalized in the response senml pack
      required: false
      schema:
        type: string
        enum: ["name","time", "unit", "value", "sum"]
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    notfound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    methodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    DataStream:
      summary: DataStream
      value:
        {
          "name": "Lobby/gw0/temperature",
          "source": {
            "type": "MQTT",
            "url": "ssl://example.com:8883",
            "topic": "gw0/temperature",
            "username": "*****",
            "password": "*****"
          },
          "dataType": "float",
          "meta": null,
        }
    DatastreamList:
      summary: Paginated Datastream List
      value:
        {
          "url":"/registry",
          "streams":[
          {
            "name": "Lobby/gw0/temperature",
            "source": {
              "type": "MQTT",
              "url": "ssl://example.com:8883",
              "topic": "gw0/temperature",
              "username": "*****",
              "password": "*****"
            },
            "dataType": "float",
            "meta": null,
          },
          {
            "name":"linksmart-pink/Temperature",
            "source":{
              "type":"MQTT",
              "url":"tcp://linksmart-dev.fit.fraunhofer.de:1883",
              "topic":"LS/v2/DGW/linksmart-pink/senml"
            },
            "dataType":"float",
            "meta":null,
            "retain":{

            }
          }
          ],
          "page":1,
          "per_page":100,
          "total":20
        }
    SenMLPack:
      summary: Example SenML pack
      value:
        [
        {"n":"urn:example:1234","u":"Cel","t":1579192670, "v":20},
        {"n":"urn:example:1234","u":"Cel","t":1579192675, "v":23.5}
        ]
    SenMLPackResponse:
      summary: Example data response
      value:
        {
          "selfLink": "/data/urn:example:1234?perPage=1000&sort=desc&from=2020-03-04T12:30:00Z&to=2020-03-04T12:45:00Z",
          "data":[
          {"n":"urn:example:1234","t":1579192675, "v":23.5},
          {"n":"urn:example:1234","t":1579192670, "v":20}
          ],
          "took": 0.001160139,
          "nextLink": "/data/urn:example:1234?perPage=1000&sort=desc&from=2020-03-04T12:30:00Z&to=2020-03-04T12:45:00Z&offset=2020-03-04T12:35:00Z"
        }