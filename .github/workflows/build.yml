on: [push, pull_request]
name: Docker Build
jobs:
  test: #Run this testing only for feature branches
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v1
        
      - #find some way to make it a precondition for all the jobs
        name: Build and test code
        run: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        env:
            VERSION: ${{github.ref}}
            BUILDNUM: ${{github.run_number}}
  go-build: 
    # Cross platform go build
    #Runs only for master branch and tags

    if: github.ref == 'refs/heads/master' ||  startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v1
        
      - #find some way to make it a precondition for all the jobs
        name: Build and test code
        run: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        env:
            VERSION: ${{github.ref}}
            BUILDNUM: ${{github.run_number}}
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=bin_name::${{ github.event.repository.name }}
       
      - 
        name: Build with xgo
        uses: crazy-max/ghaction-xgo@v1
        with:
          xgo_version: latest
          go_version: 1.14.2
          dest: build
          prefix: ${{ steps.prepare.outputs.bin_name }}-
          targets: windows/amd64, linux/amd64, linux/arm-7,linux/arm-6, linux/arm64, darwin/amd64
          v: true
          x: true
          ldflags:  -w -extldflags "-static" -X main.Version=${GITHUB_REF##*/} -X main.BuildNumber=${{github.run_number}}
      - 
        name: Upload releases
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/${{ steps.prepare.outputs.bin_name }}-*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
        
  build-docker:  
    #Cross platform docker build
    #Runs only for master branch and tags
    if: github.ref == 'refs/heads/master' ||  startsWith(github.ref, 'refs/tags/')
    #this flow is motivated from https://github.com/crazy-max/diun/
    # see blob/2893414f598450e8a9c251daad5f4def576a2323/.github/workflows/build.yml
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    -
      name: Prepare
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v7,linux/arm/v6, linux/arm64
        echo ::set-output name=docker_image::linksmart/${{ github.event.repository.name }}
        echo ::set-output name=version::${GITHUB_REF##*/}
    -
      name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - 
      name: Docker Buildx (no push)
      run: |
        docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=false" \
          --build-arg "version=${{ steps.prepare.outputs.version}}" \
          --build-arg "buildnum=${{github.run_number}}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --file Dockerfile .
   # - 
    #  name: Build and test code
     # run: docker-compose -f docker-compose.test.yml up 
      #env:
       #   VERSION: ${{steps.prepare.outputs.branch}}
        #  BUILDNUM: ${{github.run_number}}

    - 
      name: Docker Login
      env:
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        echo "${DOCKERHUB_PASSWORD}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - 
      name: Docker Buildx (push)
      run: |
        docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "version=${{ steps.prepare.outputs.version}}" \
          --build-arg "buildnum=${{github.run_number}}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --file Dockerfile .
   
